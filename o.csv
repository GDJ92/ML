Generate random numbers,"np.random.seed(12) // np.random.randint(20, 40, 100) //VS// np.random.uniform(0, 1,5) /// ***//// rag = np.random.default_rng(1234)  // y = rag.uniform(20, 40, 10) /// pred = rag.uniform(20, 40, 10)"
seed/y/pred,"from numpy.random import default_rng // rag = np.random.default_rng(1234) // y = rag.uniform(20,40,10) // pred = rag.uniform(20,40,10)"
function MSE ,"def mse(y, pred): //     error = y - pred //     square_error = error ** 2 //    mse = np.mean(square_error) //    return mse // mse(y, pred)"
Sklearn MSE,"from sklearn.metrics import mean_squared_error  /// mean_squared_error(y, pred)"
function MAE,abs_diff = np.abs(y-pred) /// np.mean(abs_diff)
Sklearn MAE,"from sklearn.metrics import mean_absolute_error // mean_absolute_error(y, pred)"
MAE SQRT,mae = np.mean(abs_diff) // np.sqrt(mae)
function R2,"def r2(y, pred): //     y_ave = np.mean(y) //     diff = y - y_ave //      square = diff**2  //    sum_of_sq = np. sum(square) //     dino = sum_of_sq  /     num = len(y) * mse(y, pred)  //     r2 = 1 - (num/dino)  //    return r2  /*/*/   r2(y, pred)"
Sklearn R2,"from sklearn.metrics import r2_score // r2_score(y, pred)"
DECISION TREE,import numpy as np // import pandas as pd // import sklearn /// from sklearn import datasets // from sklearn.datasets import load_iris
load data,x = load_iris().data // y = load_iris().target
create DT,"from sklearn.tree import DecisionTreeClassifier /// clf = DecisionTreeClassifier(random_state=12) // clf.fit(x,y)"
fix y_pred,pred = clf.predict(x)
metrics,"accuracy_score(y,pred) for clasification &  R2 for regresion r2_score(y, pred)"
KNN,from sklearn.neighbors import KNeighborsClassifier
model,"neigh = KNeighborsClassifier(n_neighbors=3) // neigh.fit(X3, Y3)"
prediction,pred3 = neigh.predict(X3) // pred3
accuracy,"accuracy_score(Y3, pred3)"
MAE,"mae3 = mean_absolute_error(Y3, pred3) // mae3"
MSE,"r3 = mean_squared_error(Y3, pred3) //  R3"
,"import numpy as np // from numpy.random import default_rng // rnd_list = default_rng(110) // int_list = rnd_list.integers(low=5, high=50, size = 5)"
function Midpoint list,def splits(x): //     splits_points = [] //     x_sorted = sorted(x) //     for i in range(len(x)-1): / /  mid_point = (x_sorted[i] + x_sorted[i+1])/2   ///    splits_points.append(mid_point)  //   return splits_points  /*/*/ splits(int_list)
,"int_twoDlist = rnd_list.integers(low=5, high=100, size = (5,3))"
function Midpoint matrix,"def splits_per_col(data): //     col_split_pts = {}  /   ncols = data.shape[1] //     for c in range(ncols): //       split_pts = splits(data[:,c])  //     col_split_pts['col_'+ str(c)] = split_pts  //     return col_split_pts   /*/*/ splits_per_col(int_twoDlist)"
